date() #  [1] "Tue Aug 22 13:10:19 2023"

library(impute)
library(DESeq2)
library(magrittr)
library(WGCNA)
library(ggplot2)
library(tidyverse)
library(CorLevelPlot)
library(gridExtra)
library(ComplexHeatmap)
allowWGCNAThreads() 

#------------------------------------------------------------------------------#
#
#                       Preparation of data for analysis
#
#------------------------------------------------------------------------------#
load("Folder_for_GitHub/01.batch_corrected_RNAseq_raw_data_and_metadata.Rda")

gsg <- goodSamplesGenes(t(ds))
summary(gsg)
gsg$allOK

table(gsg$goodGenes)
table(gsg$goodSamples)

# remove genes that are detectd as outliers
ds <- ds[gsg$goodGenes == TRUE,]

# detect outlier samples - hierarchical clustering - method 1
htree <- hclust(dist(t(ds)), method = "average")
plot(htree)


metadata$sample = rownames(metadata)

all(rownames(metadata) == colnames(ds))  

dds <- DESeqDataSetFromMatrix(
  countData = ds, # Our prepped data frame with counts
  colData = metadata, # Data frame with annotation for our samples
  design = ~Dx # Here we are not specifying a model
)

# Count normalization
dds <- estimateSizeFactors(dds)
sizeFactors(dds)
# Normalizaed counts: extraction
normalized_CAF_counts <- counts(dds, normalized=TRUE)

boxplot(rowSums(counts(dds)>15))
hist(rowSums(counts(dds)>15))

dds = dds[rowSums(counts(dds) >=15) >= 43*0.75, ]
dds_norm <- vst(dds)


# Retrieve the normalized data from the `DESeqDataSet`
normalized_counts <- assay(dds_norm) %>%
  t() # Transpose this data

#------------------------------------------------------------------------------#
#
#                       calculation of soft threshold
#
#------------------------------------------------------------------------------#
sft <- pickSoftThreshold(normalized_counts,
                         dataIsExpr = TRUE,
                         corFnc = cor,
                         networkType = "signed"
)

sft_df <- data.frame(sft$fitIndices) %>%
  dplyr::mutate(model_fit = -sign(slope) * SFT.R.sq)

ggplot(sft_df, aes(x = Power, y = model_fit, label = Power)) +
  geom_point() +
  geom_text(nudge_y = 0.1) +
  geom_hline(yintercept = 0.80, col = "red") +
  ylim(c(min(sft_df$model_fit), 1.05)) +
  xlab("Soft Threshold (power)") +
  ylab("Scale Free Topology Model Fit, signed R^2") +
  ggtitle("Scale independence") +
  theme_classic()


a1 <- ggplot(sft$fitIndices, aes(Power, SFT.R.sq, label = Power)) +
  geom_point() +
  geom_text(nudge_y = 0.1) +
  geom_hline(yintercept = 0.8, color = 'red') +
  labs(x = 'Power', y = 'Scale free topology model fit, signed R^2') +
  theme_classic()

a2 <- ggplot(sft$fitIndices, aes(Power, mean.k., label = Power)) +
  geom_point() +
  geom_text(nudge_y = 0.1) +
  labs(x = 'Power', y = 'Mean Connectivity') +
  theme_classic()

grid.arrange(a1, a2, nrow = 2)
#------------------------------------------------------------------------------#
#
#                    calculation of module and eigengenes
#
#------------------------------------------------------------------------------#
bwnet <- blockwiseModules(normalized_counts,
                          maxBlockSize = 140000, # What size chunks (how many genes) the calculations should be run in
                          TOMType = "signed", # topological overlap matrix
                          power = 12, # soft threshold for network construction
                          numericLabels = TRUE, # Let's use numbers instead of colors for module labels
                          randomSeed = 1234 # there's some randomness associated with this calculation
                          # so we should set a seed
)

bwnet <- readRDS("Folder_for_GitHub/02.bwnet.RDS") # <-Run this code to save time instead of above code
module_eigengenes <- bwnet$MEs
table(bwnet$colors)

# Print out a preview
head(module_eigengenes)

plotDendroAndColors(bwnet$dendrograms[[1]], cbind(bwnet$unmergedColors, bwnet$colors),
                    c("unmerged", "merged"),
                    dendroLabels = FALSE,
                    addGuide = TRUE,
                    hang= 0.03,
                    guideHang = 0.05)


#------------------------------------------------------------------------------#
#
#         correlation of module eigengenes with key traits in metadata -1
#
#------------------------------------------------------------------------------#
all.equal(metadata$sample, rownames(module_eigengenes)) # To confirm that result is 'TRUE'

metadata$Dx <- as.factor(metadata$Dx)
levels(metadata$Dx) 
# Create the design matrix from the `time_point` variable
des_mat <- model.matrix(~ metadata$Dx)

fit <- limma::lmFit(t(module_eigengenes), design = des_mat) # design matrix
# Apply empirical Bayes to smooth standard errors
fit <- limma::eBayes(fit)

# Apply multiple testing correction and obtain stats
stats_df <- limma::topTable(fit, number = ncol(module_eigengenes)) %>%
  tibble::rownames_to_column("module")
head(stats_df)

library(ggrepel)
ggplot(stats_df) +
  geom_point(aes(x=-logFC, y=B)) +
  geom_text_repel(data = stats_df, 
                  aes(label = module, x = -logFC, y = B, box.padding = unit(.7, "lines"),hjust= 0.30)) +
  xlab("log2 fold change") +
  ylab("B-statistic (log-odds that the gene is differentially expressed)") +
  theme(legend.position = "none",
        plot.title = element_text(size = rel(1.5), hjust = 0.5),
        axis.title = element_text(size = rel(1.25)))+
  theme_bw()


ggplot(stats_df, aes(x = -logFC, y = -log10(P.Value), size=B)) +
  geom_point(aes(col = adj.P.Val < 0.000005)) +
  scale_color_manual(values = c("grey50", "red")) +
  geom_text_repel(data = stats_df, 
                  aes(label = module, x = -logFC, y = -log10(P.Value), box.padding = unit(.7, "lines"),hjust= 0.30)) +
  labs(x = "Log Fold Change", y = "-log10(p-value)", size = "B-statistic", title = "Bubble Plot")+
  theme(legend.position = "none",
        plot.title = element_text(size = rel(1.5), hjust = 0.5),
        axis.title = element_text(size = rel(1.25)))+
  theme_bw()


#-------------------------------------------------------------------------------
module_df <- module_eigengenes %>%
  tibble::rownames_to_column("sample_code") %>%
  # Here we are performing an inner join with a subset of metadata
  dplyr::inner_join(metadata %>%
                      dplyr::select(sample, Dx),
                    by = c("sample_code" = "sample")
  )

ggplot( module_df, aes(x = Dx,y = ME16, color = Dx) )+
  geom_boxplot(width = 0.2, outlier.shape = NA) +
  ggforce::geom_sina(maxwidth = 0.3) +
  theme_classic()

ggplot( module_df, aes(x = Dx,y = ME41, color = Dx) )+
  geom_boxplot(width = 0.2, outlier.shape = NA) +
  ggforce::geom_sina(maxwidth = 0.3) +
  theme_classic()

ggplot( module_df, aes(x = Dx, y = ME14, color = Dx) )+
  geom_boxplot(width = 0.2, outlier.shape = NA) +
  ggforce::geom_sina(maxwidth = 0.3) +
  theme_classic()


gene_module_key <- tibble::enframe(bwnet$colors, name = "gene", value = "module") %>%
  # Let's add the `ME` part so its more clear what these numbers are and it matches elsewhere
  dplyr::mutate(module = paste0("ME", module))

table(bwnet$colors)

gene_module_key %>% dplyr::filter(module == "ME16") %>% pull(gene) -> ME16.gene
gene_module_key %>% dplyr::filter(module == "ME41") %>% pull(gene) -> ME41.gene
gene_module_key %>% dplyr::filter(module == "ME14") %>% pull(gene) -> ME14.gene


write.csv(gene_module_key, "Folder_for_GitHub/Table_WGCNA_gene_module_key.csv")


#------------------------------------------------------------------------------^
#make_module_ME16_heatmap function---------------------------------------------------
module_eigengene.ME16 <- module_eigengenes %>%
  dplyr::select(all_of("ME16")) %>%
  tibble::rownames_to_column("sample")

col_annot_df <- metadata %>%
  dplyr::select(sample, Dx) %>%
  dplyr::inner_join(module_eigengene.ME16, by = "sample") %>%
  dplyr::arrange(Dx, sample) %>%
  tibble::column_to_rownames("sample")

col_annot <- ComplexHeatmap::HeatmapAnnotation(
  Diagnosis = col_annot_df$Dx,
  # Add annotation barplot
  module_eigengene = ComplexHeatmap::anno_barplot(dplyr::select(col_annot_df, "ME16")),
  col = list(Diagnosis = c("Des" = "#f1a340", "Scar" = "#998ec3"))
)

col_annot@anno_list

mod_mat <- normalized_counts %>%
  t() %>%
  as.data.frame() %>%
  dplyr::filter(rownames(.) %in% ME16.gene) %>%
  dplyr::select(rownames(col_annot_df)) %>%
  as.matrix()

mod_mat[1:3,1:3]

mod_mat <- mod_mat %>% t() %>%
  scale() %>% t()

color_func <- circlize::colorRamp2(
  c(-2, 0, 2),
  c("#67a9cf", "#f7f7f7", "#ef8a62")
)

heatmap <- ComplexHeatmap::Heatmap(mod_mat,
                                   name = "ME16",
                                   col = color_func,
                                   bottom_annotation = col_annot,
                                   cluster_columns = FALSE,
                                   show_row_names = TRUE,
                                   show_column_names = TRUE)

heatmap

#--------------------------------

#make_module_ME41_heatmap function---------------------------------------------------
module_eigengene.ME41 <- module_eigengenes %>%
  dplyr::select(all_of("ME41")) %>%
  tibble::rownames_to_column("sample")

col_annot_df <- metadata %>%
  dplyr::select(sample, Dx) %>%
  dplyr::inner_join(module_eigengene.ME41, by = "sample") %>%
  dplyr::arrange(Dx, sample) %>%
  tibble::column_to_rownames("sample")

col_annot <- ComplexHeatmap::HeatmapAnnotation(
  Diagnosis = col_annot_df$Dx,
  # Add annotation barplot
  module_eigengene = ComplexHeatmap::anno_barplot(dplyr::select(col_annot_df, "ME41")),
  col = list(Diagnosis = c("Des" = "#f1a340", "Scar" = "#998ec3"))
)

mod_mat <- normalized_counts %>%
  t() %>%
  as.data.frame() %>%
  dplyr::filter(rownames(.) %in% ME41.gene) %>%
  dplyr::select(rownames(col_annot_df)) %>%
  as.matrix()

mod_mat <- mod_mat %>% t() %>%
  scale() %>% t()

color_func <- circlize::colorRamp2(
  c(-2, 0, 2),
  c("#67a9cf", "#f7f7f7", "#ef8a62")
)

heatmap <- ComplexHeatmap::Heatmap(mod_mat,
                                   name = "ME41",
                                   col = color_func,
                                   bottom_annotation = col_annot,
                                   cluster_columns = FALSE,
                                   show_row_names = TRUE,
                                   show_column_names = TRUE)

heatmap



#make_module_ME14_heatmap function---------------------------------------------------
module_eigengene.ME14 <- module_eigengenes %>%
  dplyr::select(all_of("ME14")) %>%
  tibble::rownames_to_column("sample")

col_annot_df <- metadata %>%
  dplyr::select(sample, Dx) %>%
  dplyr::inner_join(module_eigengene.ME14, by = "sample") %>%
  dplyr::arrange(Dx, sample) %>%
  tibble::column_to_rownames("sample")

col_annot <- ComplexHeatmap::HeatmapAnnotation(
  Diagnosis = col_annot_df$Dx,
  # Add annotation barplot
  module_eigengene = ComplexHeatmap::anno_barplot(dplyr::select(col_annot_df, "ME14")),
  col = list(Diagnosis = c("Des" = "#f1a340", "Scar" = "#998ec3"))
)

mod_mat <- normalized_counts %>%
  t() %>%
  as.data.frame() %>%
  dplyr::filter(rownames(.) %in% ME14.gene) %>%
  dplyr::select(rownames(col_annot_df)) %>%
  as.matrix()

mod_mat <- mod_mat %>% t() %>%
  scale() %>% t()

color_func <- circlize::colorRamp2(
  c(-2, 0, 2),
  c("#67a9cf", "#f7f7f7", "#ef8a62")
)

heatmap <- ComplexHeatmap::Heatmap(mod_mat,
                                   name = "ME14",
                                   col = color_func,
                                   bottom_annotation = col_annot,
                                   cluster_columns = FALSE,
                                   show_row_names = TRUE,
                                   show_column_names = TRUE)

heatmap


#------------------------------------------------------------------------------#
#
#              Intramodular analysis: Identifying driver genes
#
#------------------------------------------------------------------------------#
# Calculate the module membership and the associated p-values
# The module membership/intramodular connectivity is calculated as the correlation of the eigengene and
#       the gene expression profile. 
# This quantifies the similarity of all genes on the array to every module.

# Calculate the correlation of genes with module eigengens----------------------
# Define numbers of genes and samples
nSamples <- nrow(normalized_counts)
nGenes <- ncol(normalized_counts)

module_eigengenes[1:3, 1:5]
normalized_counts[1:3, 1:5]
module.membership.measure <- cor(module_eigengenes, normalized_counts, use = 'p')
module.membership.measure[1:3, 1:4]
module.membership.measure.pvals <- corPvalueStudent(module.membership.measure, nrow(normalized_counts))
module.membership.measure.pvals[1:5,1:5]
dim(module.membership.measure)  # 42 13571

module.membership.measure_ME16 <- module.membership.measure[rownames(module.membership.measure)=='ME16',]
module.membership.measure.pvals_ME16 <- module.membership.measure.pvals[rownames(module.membership.measure.pvals)=='ME16',]
all(names(module.membership.measure_ME16) == names(module.membership.measure.pvals_ME16)) # [1] TRUE

module.membership_ME16 <- data.frame(gene.symbol =names(module.membership.measure_ME16),
                                     module.membership = module.membership.measure_ME16,
                                     mm.pval = module.membership.measure.pvals_ME16)
                                
#module.membership_ME16 %>% arrange(desc(corr)) %>% filter(corr >0.5 & pval <0.01)  
module.membership_ME16 %>% 
  arrange(desc(module.membership)) %>% 
  filter(module.membership >0.5 & mm.pval <0.01)  
module.membership_ME16[1:4,1:3]


# Calculate the correlation of genes with traits--------------------------------
metadata$Dx8 <- ifelse(metadata$Dx=='Scar', 0, 1)
gene.signf.corr <- cor(normalized_counts, metadata$Dx8, use = 'p')
gene.signf.corr.pvals <- corPvalueStudent(gene.signf.corr, nSamples)

unique(gene.signf.corr.pvals[,1])

gene.signf.corr.pvals %>% 
  as.data.frame() %>% 
  arrange(V1) %>% 
  head(25)

# Combine gene-eigengens and gene-traits data-----------------------------------
gene.correl <- merge(gene.signf.corr, gene.signf.corr.pvals, by=0)
gene.correl %>% rename('corr.to.trait'='V1.x', 'trait.pval'='V1.y') %>% arrange(desc(corr.to.trait)) -> gene.correl
gene.correl[1:3,1:3]

# calculate driver genes -------------------------------------------------------
driver_gene_ME16 <- left_join(module.membership_ME16, gene.correl, by=c('gene.symbol'='Row.names'))
driver_gene_ME16[1:45, 1:5]
driver_gene_ME16 %>% arrange(desc(corr.to.trait)) -> driver_gene_ME16 




p<-ggplot(driver_gene_ME16, aes(x=module.membership, y=corr.to.trait, 
                                color = module.membership < 0.85)) + 
  geom_point() +
  geom_smooth(method=lm, se=FALSE) + 
  stat_ellipse()

p<-ggplot(driver_gene_ME16, aes(x=module.membership, y=corr.to.trait, 
                                color = module.membership < 0.85)) + 
  geom_point() +
  stat_ellipse() +
  theme_bw()    # theme_classic()


pdf("result/2023-08-22/02._02._03.driver.gene.pdf", width = 10, height = 7)
p<-ggplot(driver_gene_ME16, aes(x=module.membership, y=corr.to.trait, 
                                color = module.membership > 0.85)) + 
  geom_point(size=0.5) +
  scale_color_manual(values=c("FALSE"="lightblue", "TRUE"='red')) +
  stat_ellipse() +
  theme_classic()
print(p)
dev.off()

library(ggrepel)
p<-ggplot(driver_gene_ME16, aes(x=module.membership, y=corr.to.trait, 
                                color = module.membership > 0.85)) + 
  geom_point(size=1.5) +
  geom_text_repel(data = driver_gene_ME16 %>% 
                    filter(module.membership > 0.85), 
                  aes(label = gene.symbol, x = module.membership, y = corr.to.trait, box.padding = unit(2.5, "lines"),hjust= 0.50)) +
  scale_color_manual(values=c("FALSE"="cyan4", "TRUE"='red')) +
  stat_ellipse() +
  theme_classic()
print(p)


# Filter your data for labels first
label_data <- driver_gene_ME16 %>% 
  filter(module.membership > 0.85 | corr.to.trait >0.85)

p <- ggplot(driver_gene_ME16, aes(x=module.membership, y=corr.to.trait, 
                                  color = module.membership > 0.85 | corr.to.trait >0.80)) + 
  geom_point(size=1.5) +
  geom_text_repel(data = label_data, 
                  aes(label = gene.symbol, x = module.membership, y = corr.to.trait),
                  box.padding = unit(0.5, "lines"),
                  point.padding = unit(0.5, "lines"),
                  size = 3,
                  min.segment.length = unit(0, 'lines'),
                  max.overlaps = Inf) +
  scale_color_manual(values=c("FALSE"="#92C5DE", "TRUE"='red')) +
  theme_classic() +
  theme(legend.position="none")  # Hide the legend if not needed
# Save the plot with increased dimensions
print(p)

write.csv(driver_gene_ME16, "Folder_for_GitHub/Table_WGCNA_driver_genes_ME16.csv")
